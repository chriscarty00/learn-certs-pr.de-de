### YamlMime:Course
title: Designing and Implementing Microsoft DevOps solutions
metadata:
  title: 'Kurs AZ-400T00-A: Entwerfen und Implementieren von Microsoft DevOps-Lösungen'
  description: 'Kurs AZ-400T00-A: Entwerfen und Implementieren von Microsoft DevOps-Lösungen'
  ms.openlocfilehash: bea3f9cb0a54a9471430cffa1f1b3f7644c0c6ff
  ms.sourcegitcommit: 9732383406c868d1279ca5ca79d423c5b99be073
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 09/14/2021
  ms.locfileid: "132107635"
uid: course.az-400t00
courseNumber: AZ-400T00-A
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: Transformation mit geteilten Zielen und Fristen planen
- skill: Auswählen eines Projekts und Identifizieren von Projektmetriken und Leistungskennzahlen (Key Performance Indicators, KPIs)
- skill: Erstellen eines Teams und einer agilen Organisationsstruktur
- skill: Entwickeln einer Tool-Integrationsstrategie
- skill: Entwerfen einer Lizenzverwaltungsstrategie (z. B. Azure DevOps- und GitHub-Benutzer)
- skill: Entwerfen einer Strategie für die End-to-End Rückverfolgbarkeit von Arbeitsaufgaben zu Arbeitssoftware
- skill: Entwickeln einer Anmeldungs- und Zugriffsstrategie
- skill: Entwickeln einer Strageie zur Integrierung von Vor-Ort und Cloud-Resourssen
- skill: Vorteile bei der Nutzung einer Lösungskontrolle beschreiben
- skill: Beschreiben von Azure Repos und GitHub
- skill: Migrieren von der TFVC nach Git
- skill: Verwalten der Codequalität, einschließlich technischer Schulden, SonarCloud und anderer Tools
- skill: Aufbau von Organisationswissen über die Codequalität
- skill: Erläutern der Strukturierung von Git-Repositorys
- skill: Beschreiben von verzweigten Git-Workflows
- skill: Nutzen von Pull Requests für Zusammenarbeit und Codeüberprüfungen
- skill: Nutzen von Git-Hooks für die Automatisierung
- skill: Verwenden von Git zum Fördern des Inner-Source-Ansatzes innerhalb einer Organisation
- skill: Erläutern der Rolle von Azure Pipelines und seiner Komponenten
- skill: Konfigurieren von Agents für die Verwendung in Azure Pipelines
- skill: Erklären, warum kontinuierliche Integration wichtig ist
- skill: Implementieren von CI (Continuous Integration) mit Azure Pipelines
- skill: Definieren von Site Reliability Engineering (SRE)
- skill: Entwurfsprozesse zum Messen der Endbenutzerzufriedenheit und Analysieren von Benutzerfeedback
- skill: Entwurfsprozesse zur Automatisierung der Anwendungsanalyse
- skill: Verwalten von Warnmeldungen und Reduzieren von unnötigen und nicht relevanten Warnmeldungen
- skill: Durchführen von Nachbesprechungen ohne Schuldzuweisungen und Schaffung einer Fairnesskultur
- skill: Infrastruktur und Konfigurationsstrategien und die richtigen Werkzeuge für eine Freigabepipeline und Anwendungsinfrastruktur definieren
- skill: Compliance und Sicherheit in Ihre Anwendungsinfrastruktur implementieren
- skill: Beschreiben der potenziellen Herausforderungen bei der Integration von Open-Source-Software
- skill: Überprüfen von Open-Source-Softwarepaketen auf Sicherheit und Lizenzkonformität
- skill: Verwalten von Sicherheits- und Compliancerichtlinien der Organisation
- skill: Integrieren von Lizenz- und Sicherheitsrisikoüberprüfungen in Build- und Bereitstellungspipelines
- skill: Konfigurieren von Buildpipelines für den Zugriff auf Paketsicherheits- und Lizenzbewertung
learningPartnersLink: /learn/certifications/partners
locales:
- en
- ja
- zh-cn
- ko
levels:
- advanced
roles:
- devops-engineer
products:
- azure
- azure-devops
- azure-kubernetes-service
- azure-container-instances
- azure-automation
exams:
- uid: exam.az-400
summary: >-
  Dieser Kurs vermittelt die Kenntnisse und Fähigkeiten zur Entwicklung und Umsetzung von DevOps-Prozessen und -praktiken. Die Teilnehmer lernen, wie sie DevOps planen, Quellcodeverwaltung verwenden, Git für ein Unternehmen skalieren, Artefakte konsolidieren, eine Strategie für das Abhängigkeitsmanagement entwerfen, Geheimnisse verwalten, eine kontinuierliche Integration implementieren, eine Strategie zum Erstellen von Containern implementieren, eine Freigabe-Strategie entwerfen und einen Freigabe-Management-Workflow einrichten, ein Bereitstellungsmuster umsetzen und Feedback-Mechanismen optimieren.


  #### <a name="audience-profile"></a>Zielgruppenprofil

  Die Teilnehmer dieses Kurses sind daran interessiert, DevOps-Prozesse zu entwerfen und zu implementieren oder die Zertifizierungsprüfung für Microsoft Azure DevOps-Lösungen abzulegen.
prerequisitesSection: "Für eine erfolgreiche Kursteilnehmer sind die folgenden Vorkenntnisse erforderlich:\n- Verständnis von Cloud Computing-Konzepten, einschließlich PaaS-, SaaS- und IaaS-Implementierungen\n- Erfahrung in Bezug auf Azure-Verwaltung und Azure-Entwicklung mit nachgewiesenen Kenntnissen in mindestens einem dieser Bereiche\n- Kenntnisse in Bezug auf Versionskontrolle, agile Softwareentwicklung und die wichtigsten Prinzipien der Softwareentwicklung Es wäre hilfreich, Erfahrung in einem Unternehmen zu haben, das Software liefert.\n\nWenn Sie sich mit Azure und Cloud Computing noch nicht auskennen, sollten Sie eine der folgenden Ressourcen nutzen:\n- Kostenloser Onlinekurs: Azure-Grundlagen (https://docs.microsoft.com/en-us/learn/paths/azure-fundamentals/) \n- Präsenzschulung: AZ-900: Azure-Grundlagen (https://docs.microsoft.com/en-us/learn/certifications/courses/az-900t01)\n\nWenn Sie noch nicht mit der Azure-Verwaltung vertraut sind, ziehen Sie die folgenden Trainings in Betracht:\n- Kostenloser Onlinekurs: Voraussetzungen für Azure-Administratoren (https://docs.microsoft.com/en-us/learn/paths/az-104-administrator-prerequisites/)\n- Präsenzschulungen: AZ-104: Microsoft Azure-Administrator (https://docs.microsoft.com/en-us/learn/certifications/courses/az-104t00) und AZ-010: Azure-Verwaltung für AWS-SysOps (https://docs.microsoft.com/en-us/learn/certifications/courses/az-010t00)\n\nAls Neueinsteiger in der Azure-Entwicklung sollten Sie folgende Trainings erwägen:\n- Kostenloser Onlinekurs: Erstellen von serverlosen Anwendungen (https://docs.microsoft.com/en-us/learn/paths/create-serverless-applications/)\n- Präsenzschulungen: AZ-204: Entwickeln von Lösungen für Microsoft Azure (https://docs.microsoft.com/en-us/learn/certifications/courses/az-204t00) und AZ-020: Microsoft Azure-Lösungen für AWS-Entwickler (https://docs.microsoft.com/en-us/learn/certifications/courses/az-020t00)"
outlineSection: "### <a name=\"module-158-planning-for-devops\"></a>Modul 1: DevOps-Planung\n#### <a name=\"lessons\"></a>Lektionen\n- Transformationsplanung\n- Projektauswahl\n- Teamstrukturen\n- Migration zu Azure DevOps\n\n#### <a name=\"lab-58-agile-planning-and-portfolio-management-with-azure-boards\"></a>Lab: Agile Planung and Portfoliomanagement mit Azure Boards\n\nNach Abschluss dieses Moduls können die Schüler:\n- Transformation mit geteilten Zielen und Fristen planen\n- Auswählen eines Projekts und Identifizieren von Projektmetriken und Leistungskennzahlen (Key Performance Indicators, KPIs)\n- Erstellen eines Teams und einer agilen Organisationsstruktur\n- Entwickeln einer Tool-Integrationsstrategie\n- Entwerfen einer Lizenzverwaltungsstrategie (z. B. Azure DevOps- und GitHub-Benutzer)\n- Entwerfen einer Strategie für die End-to-End Rückverfolgbarkeit von Arbeitsaufgaben zu Arbeitssoftware\n- Entwickeln einer Anmeldungs- und Zugriffsstrategie\n- Entwickeln einer Strageie zur Integrierung von Vor-Ort und Cloud-Resourssen\n\n\n### <a name=\"module-258-getting-started-with-source-control\"></a>Modul 2: Erste Schritte mit der Quellcodeverwaltung\n#### <a name=\"lessons\"></a>Lektionen\n- Was ist Quellcodeverwaltung?\n- Vorteile der Quellcodeverwaltung\n- Arten der Quellcodeverwaltung\n- Einführung in Azure Repos\n- Einführung in GitHub\n- Migration von TFVC (Team Foundation Version Control) zu Git in Azure Repos\n\n#### <a name=\"lab-58-version-controlling-with-git-in-azure-repos\"></a>Lab: Versionskontrolle mit Git in Azure Repos\n\nNach Abschluss dieses Moduls können die Schüler:\n- Vorteile bei der Nutzung einer Lösungskontrolle beschreiben \n- Beschreiben von Azure Repos und GitHub\n- Migrieren von der TFVC nach Git\n\n\n### <a name=\"module-358-managing-technical-debt\"></a>Modul 3: Verwalten von technischen Schulen\n#### <a name=\"lessons\"></a>Lektionen\n- Identifizieren technischer Schulden\n- Wissensaustausch innerhalb des Teams\n- Modernisieren von Entwicklungsumgebungen mit Codespaces\n\n#### <a name=\"lab-58-sharing-team-knowledge-using-azure-project-wikis\"></a>Lab: Wissensaustausch im Team mithilfe von Azure-Projekt-Wikis\n\nNach Abschluss dieses Moduls können die Schüler:\n- Verwalten der Codequalität, einschließlich technischer Schulden, SonarCloud und anderer Tools\n- Aufbau von Organisationswissen über die Codequalität\n\n\n### <a name=\"module-458-working-with-git-for-enterprise-devops\"></a>Modul 4: Arbeiten mit Git für DevOps in Unternehmen\n#### <a name=\"lessons\"></a>Lektionen\n- Strukturieren von Git-Repositorys\n- Verzweigte Git-Workflows\n- Zusammenarbeit mit Pull Requests in Azure Repos\n- Gründe für die Verwendung von Git-Hooks\n- Fördern des Inner-Source-Ansatzes\n- Verwalten von Git-Repositorys\n\n#### <a name=\"lab-58-version-controlling-with-git-in-azure-repos\"></a>Lab: Versionskontrolle mit Git in Azure Repos\n\nNach Abschluss dieses Moduls können die Schüler:\n- Erläutern der Strukturierung von Git-Repositorys \n- Beschreiben von verzweigten Git-Workflows\n- Nutzen von Pull Requests für Zusammenarbeit und Codeüberprüfungen \n- Nutzen von Git-Hooks für die Automatisierung \n- Verwenden von Git zum Fördern des Inner-Source-Ansatzes innerhalb einer Organisation\n\n\n### <a name=\"module-558-configuring-azure-pipelines\"></a>Modul 5: Konfigurieren von Azure Pipelines\n#### <a name=\"lessons\"></a>Lektionen\n- Das Konzept von Pipelines in DevOps\n- Azure Pipelines\n- Bewerten der Verwendung von gehosteten Agents im Vergleich zu selbstgehosteten Agents\n- Agentpools\n- Pipelines und Nebenläufigkeit\n- Azure DevOps und Open-Source-Projekte (öffentliche Projekte)\n- Azure Pipelines-YAML und Visual Designer im Vergleich\n\n#### <a name=\"lab-58-configuring-agent-pools-and-understanding-pipeline-styles\"></a>Lab: Konfigurieren von Agent-Pools und Verstehen von Pipelinearten\n\nNach Abschluss dieses Moduls können die Schüler:\n- Erläutern der Rolle von Azure Pipelines und seiner Komponenten\n- Konfigurieren von Agents für die Verwendung in Azure Pipelines\n\n\n### <a name=\"module-658-implementing-continuous-integration-using-azure-pipelines\"></a>Modul 6: Implementieren von Continuous Integration (CI) mit Azure Pipelines\n#### <a name=\"lessons\"></a>Lektionen\n- Übersicht über Continuous Integration (CI)\n- Implementieren einer Buildstrategie\n- Integration in Azure Pipelines\n- Integrieren einer externen Quellcodeverwaltung mit Azure Pipelines\n- Einrichten von selbstgehosteten Agents\n\n#### <a name=\"lab-58-enabling-continuous-integration-with-azure-pipelines\"></a>Lab : Aktivieren von Continuous Integration (CI) mit Azure Pipelines\n\n#### <a name=\"lab-58-integrating-external-source-control-with-azure-pipelines\"></a>Lab: Integrieren einer externen Quellcodeverwaltung mit Azure Pipelines\n\nNach Abschluss dieses Moduls können die Schüler:\n- Erklären, warum kontinuierliche Integration wichtig ist \n- Implementieren von CI (Continuous Integration) mit Azure Pipelines\n\n\n### <a name=\"module-758-managing-application-configuration-and-secrets\"></a>Modul 7: Verwalten von Anwendungskonfiguration und Geheimnissen\n#### <a name=\"lessons\"></a>Lektionen\n- Einführung in Sicherheit\n- Implementieren eines sicheren Entwicklungsprozesses\n- Überdenken der Anwendungskonfigurationsdaten\n- Verwalten von Geheimnissen, Token und Zertifikaten\n- Integration in Identitätsverwaltungssysteme\n- Implementieren der Anwendungskonfiguration\n\n#### <a name=\"lab-58-integrating-azure-key-vault-with-azure-devops\"></a>Lab: Integrieren von Azure Key Vault in Azure DevOps\n\nNach Abschluss dieses Moduls können die Schüler:\n- Verwalten von Anwendungskonfiguration und Geheimnissen\n- Integrieren von Azure Key Vault in eine Pipeline \n\n\n### <a name=\"module-858-implementing-continuous-integration-with-github-actions\"></a>Modul 8: Implementieren von Continous Integration (CI) mit GitHub Actions\n#### <a name=\"lessons\"></a>Lektionen\n- GitHub Actions\n- Continuous Integration (CI) mit GitHub Actions\n- Schützen von Geheimnissen für GitHub Actions\n\n#### <a name=\"lab-58-github-actions-continuous-integration\"></a>Lab: GitHub Actions für Continuous Integration (CI)\n\nNach Abschluss dieses Moduls können die Schüler:\n- Erstellen von und Arbeiten mit GitHub Actions und Workflows\n- Implementieren von Continuous Integration (CI) mit GitHub Actions\n\n\n### <a name=\"module-958-designing-and-implementing-a-dependency-management-strategy\"></a>Modul 9: Entwerfen und Implementieren einer Strategie für die Abhängigkeitsverwaltung\n#### <a name=\"lessons\"></a>Lektionen\n- Paketabhängigkeiten\n- Verwalten von Paketen\n- Migrieren und Konsolidieren von Artefakten\n- Paketsicherheit\n- Implementieren einer Versionsverwaltungsstrategie\n\n#### <a name=\"lab-58-package-management-with-azure-artifacts\"></a>Lab: Paketverwaltung mit Azure Artifacts\n\nNach Abschluss dieses Moduls können die Schüler:\n- Empfehlen der Artefakt Managementtools und Praktiken\n- Abstrahieren von common packages zur aktivierung von sharing und wiederverwendung\n- Artifakte migrieren und konsolidieren\n- Source-Kontrollmaßnahmen migrieren und integrieren\n\n\n### <a name=\"module-1058-designing-a-release-strategy\"></a>Modul 10: Entwerfen einer Releasestrategie\n#### <a name=\"lessons\"></a>Lektionen\n- Einführung in Continuous Delivery (CD)\n- Empfehlungen für eine Releasestrategie\n- Aufbau einer qualitativ hochwertigen Releasepipeline\n- Auswählen des richtigen Tools für die Releaseverwaltung\n\n#### <a name=\"lab-58-controlling-deployments-using-release-gates\"></a>Lab: Steuern von Bereitstellungen mithilfe von Releasegates\n\n#### <a name=\"lab-58-creating-a-release-dashboard\"></a>Lab: Erstellen eines Releasedashboards\n\nNach Abschluss dieses Moduls können die Schüler:\n- Zwischen Freigabe und Bereitstellung unterscheiden\n- Komponenten der Freigabe-Pipeline definieren\n- Wichtige Überlegungen für die Erstellung einer Freigabestrategie erklären\n- Klassifizieren eines Release im Vergleich zu einem Releaseprozess und Erläutern, wie die Qualität beider Prozesse kontrolliert werden kann\n- Das Prinzip der Freigabe-Gates beschreiben und wie man mit Freigabehinweisen und Dokumentation umgeht\n- Freigabe-Managementtool auswählen\n\n\n### <a name=\"module-1158-implementing-continuous-deployment-using-azure-pipelines\"></a>Modul 11: Implementieren von Continuous Deployment (CD) mit Azure Pipelines\n#### <a name=\"lessons\"></a>Lektionen\n- Erstellen einer Releasepipeline\n- Bereitstellen und Konfigurieren von Umgebungen\n- Verwalten und Modularisieren von Aufgaben und Vorlagen\n- Konfigurieren einer automatisierten Integration und Funktionstestautomatisierung\n- Automatisieren der Integritätsprüfung\n\n#### <a name=\"lab-58-configuring-pipelines-as-code-with-yaml\"></a>Lab: Konfigurieren von Pipelines-as-Code mit YAML\n\n#### <a name=\"lab-58-setting-up-and-running-functional-tests\"></a>Lab: Einrichten und Ausführen von Funktionstests\n\nNach Abschluss dieses Moduls können die Schüler:\n- Terminologie erklären, die in Azure-DevOps und anderen Freigabe-Managementtools verwendet wird\n- Erklären, was Build- und Freigabe-Aufgaben sind, was sie können und einige verfügbare Bereitstellungsaufgaben\n- Erklären, warum zuweilen mehrere Freigabeaufträge in einer Freigabe-Pipeline benötigt werden\n- Zwischen Multi-Agent und Multi-Konfigurations-Freigabeauftrag unterscheiden\n- Freigabe-Variablen und Stufen-Variablen in der Freigabe-Pipeline verwenden\n- Eine Umgebung sicher durch eine Serviceverbindung bereitstellen\n- Die verschiedenen Möglichkeiten auflisten, den Zustand Ihrer Pipeline und die Freigabe mit Hilfe von Warnungen, Service-Hooks und Berichten zu überprüfen.\n\n\n### <a name=\"module-1258-implementing-an-appropriate-deployment-pattern\"></a>Modul 12: Implementieren eines geeigneten Bereitstellungsmusters\n#### <a name=\"lessons\"></a>Lektionen\n- Einführung in Bereitstellungsmuster\n- Implementieren einer Blau-Grün-Bereitstellung\n- Feature Toggles\n- Canary-Releases\n- Dark Launching\n- A/B-Test\n- Bereitstellung mit progressiver Exposition\n\n#### <a name=\"lab-58-feature-flag-management-with-launchdarkly-and-azure-devops\"></a>Lab: Verwalten von Featureflags mit LaunchDarkly und Azure DevOps\n\nNach Abschluss dieses Moduls können die Schüler:\n- Bereitstellungsmuster beschreiben\n- Implementieren einer Blau-Grün-Bereitstellung\n- Canary-Freigabe umsetzen\n- Implementieren einer progressiven Belastungs-Bereitstellung\n\n\n### <a name=\"module-1358-managing-infrastructure-and-configuration-using-azure-tools\"></a>Modul 13: Verwalten von Infrastruktur und Konfiguration mithilfe von Azure-Tools\n#### <a name=\"lessons\"></a>Lektionen\n- Infrastructure-as-Code (IaC) und Konfigurationsverwaltung\n- Erstellen von Azure-Ressourcen mithilfe von ARM-Vorlagen\n- Erstellen von Azure-Ressourcen mit der Azure CLI\n- Azure Automation mit DevOps\n- Konfigurieren des gewünschten Zustands (Desired State Configuration, DSC)\n\n#### <a name=\"lab-58-azure-deployments-using-resource-manager-templates\"></a>Lab: Azure-Bereitstellungen mithilfe von Resource Manager-Vorlagen\n\nNach Abschluss dieses Moduls können die Schüler:\n- Infrastruktur und Konfiguration als Code-Richtlinien anwenden.\n- Infrastruktur mit Microsoft Automatisierungstechnologien, wie z.B. ARM-Vorlagen, PowerShell und Azure CLI bereitstellen und verwalten \n\n\n### <a name=\"module-1458-third-party-infrastructure-as-code-tools-available-with-azure\"></a>Modul 14: In Azure verfügbare IaC-Tools (Infrastructure-as-Code) von Drittanbietern\n#### <a name=\"lessons\"></a>Lektionen\n- Chef\n- Puppet\n- Ansible\n- Terraform\n\n#### <a name=\"lab-58-automating-infrastructure-deployments-in-the-cloud-with-terraform-and-azure-pipelines\"></a>Lab: Automatisieren von Infrastrukturbereitstellungen in der Cloud mit Terraform und Azure Pipelines\n\n#### <a name=\"lab-58-deploying-apps-with-chef-on-azure\"></a>Lab: Bereitstellen von Apps mit Chef in Azure\n\n#### <a name=\"lab-58-deploy-app-with-puppet-on-azure\"></a>Lab: Bereitstellen von Apps mit Puppet in Azure\n\n#### <a name=\"lab-58-ansible-with-azure\"></a>Lab: Ansible mit Azure\n\nNach Abschluss dieses Moduls können die Schüler:\n- Bereitstellen und Konfigurieren der Infrastruktur mit Tools und Diensten von Drittanbietern, z. B. Azure, Chef, Puppet, Ansible und Terraform\n\n\n### <a name=\"module-1558-managing-containers-using-docker\"></a>Modul 15: Verwalten von Containern mithilfe von Docker\n#### <a name=\"lessons\"></a>Lektionen\n- Implementieren einer Containerbuildstrategie\n- Verwenden von mehrstufigen Docker-Builds\n\n#### <a name=\"lab-58-modernizing-existing-aspnet-apps-with-azure\"></a>Lab: Modernisieren vorhandener ASP.NET-Apps mit Azure\n\nNach Abschluss dieses Moduls können die Schüler:\n- Eine Container-Strategie umsetzen, einschließlich der Unterschiede zwischen Containern und virtuellen Maschinen und der Verwendung von Containern durch Microservices\n- Container mit Docker umsetzen\n- Implementieren von mehrstufigen Docker-Builds\n\n\n### <a name=\"module-1658-creating-and-managing-kubernetes-service-infrastructure\"></a>Modul 16: Erstellen und Verwalten der Kubernetes Service-Infrastruktur\n#### <a name=\"lessons\"></a>Lektionen\n- Azure Kubernetes Service\n- Kubernetes-Tools\n- Integrieren von AKS in Pipelines\n\n#### <a name=\"lab-58-deploying-a-multi-container-application-to-azure-kubernetes-service\"></a>Bereitstellen einer Anwendung mit mehreren Containern in Azure Kubernetes Service\n\nNach Abschluss dieses Moduls können die Schüler:\n- Verwaltete Kubernetes-Cluster bereitstellen und konfigurieren \n\n\n\n### <a name=\"module-1758-implementing-feedback-for-development-teams\"></a>Modul 17: Implementieren von Feedback für die Entwicklungteams\n#### <a name=\"lessons\"></a>Lektionen\n- Implementieren von Tools zur Verfolgung von Systemnutzung, Featurenutzung und Datenfluss\n- Implementieren des Routings für Absturzberichtsdaten von Mobilanwendungen\n- Entwickeln von Überwachungs- und Statusdashboards\n- Integrieren und Konfigurieren von Ticketsystemen\n\n#### <a name=\"lab-58-monitoring-application-performance-with-application-insights\"></a>Lab: Überwachen der Anwendungsleistung mit Application Insights\n\nNach Abschluss dieses Moduls können die Schüler:\n- Tools anwenden, die die Systemnutzung, Funktionsnutzung und den Fluss verfolgen\n- Konfigurieren der Crash Report-Integration für Client Apps\n- Implementierung eines Routings für die Daten des Crash-Berichts der Client-Anwendung\n- Entwickeln von Überwachungs- und Statusdashboards\n- Integration und Konfiguration von Ticketingsystemen mit dem Arbeitsmanagementsystem des Entwicklungsteams\n\n\n### <a name=\"module-1858-implementing-system-feedback-mechanisms\"></a>Modul 18: Implementieren von Mechanismen für Systemfeedback\n#### <a name=\"lessons\"></a>Lektionen\n- Websitezuverlässigkeits-Engineering (Site Reliability Engineering)\n- Entwurfsmethoden zum Messen der Endbenutzerzufriedenheit\n- Entwerfen von Prozessen zum Erfassen und Analysieren von Benutzerfeedback\n- Entwurfsprozesse zur Automatisierung der Anwendungsanalyse\n- Verwalten von Warnungen\n- Vorwurfsfreie Nachbesprechungen und Fairnesskultur\n\n#### <a name=\"lab-58-integration-between-azure-devops-and-teams\"></a>Lab: Integration zwischen Azure DevOps und Teams\n\nNach Abschluss dieses Moduls können die Schüler:\n- Definieren von Site Reliability Engineering (SRE)\n- Entwurfsprozesse zum Messen der Endbenutzerzufriedenheit und Analysieren von Benutzerfeedback\n- Entwurfsprozesse zur Automatisierung der Anwendungsanalyse\n- Verwalten von Warnmeldungen und Reduzieren von unnötigen und nicht relevanten Warnmeldungen\n- Durchführen von Nachbesprechungen ohne Schuldzuweisungen und Schaffung einer Fairnesskultur\n\n\n### <a name=\"module-1958-implementing-security-in-devops-projects\"></a>Modul 19: Implementieren von Sicherheit in DevOps Projects\n#### <a name=\"lessons\"></a>Lektionen\n- Sicherheit in der Pipeline\n- Azure Security Center\n\n#### <a name=\"lab-58-implement-security-and-compliance-in-an-azure-devops-pipeline\"></a>Lab: Implementieren von Sicherheit und Compliance in einer Azure DevOps-Pipeline\n\nNach Abschluss dieses Moduls können die Schüler:\n- Infrastruktur und Konfigurationsstrategien und die richtigen Werkzeuge für eine Freigabepipeline und Anwendungsinfrastruktur definieren\n- Compliance und Sicherheit in Ihre Anwendungsinfrastruktur implementieren\n\n\n\n### <a name=\"module-2058-validating-code-bases-for-compliance\"></a>Modul 20: Überprüfen der Codebasis auf Konformität\n#### <a name=\"lessons\"></a>Lektionen\n- Open-Source-Software\n- Verwalten von Sicherheits- und Konformitätsrichtlinien\n- Integrieren von Lizenz- und Sicherheitsrisikoüberprüfungen\n\n#### <a name=\"lab-58-managing-technical-debt-with-sonarqube-and-azure-devops\"></a>Lab: Verwalten technischer Schulden mit SonarQube und Azure DevOps\n\nNach Abschluss dieses Moduls können die Schüler:\n- Beschreiben der potenziellen Herausforderungen bei der Integration von Open-Source-Software\n- Überprüfen von Open-Source-Softwarepaketen auf Sicherheit und Lizenzkonformität\n- Verwalten von Sicherheits- und Compliancerichtlinien der Organisation\n- Integrieren von Lizenz- und Sicherheitsrisikoüberprüfungen in Build- und Bereitstellungspipelines\n- Konfigurieren von Buildpipelines für den Zugriff auf Paketsicherheits- und Lizenzbewertung"
