### YamlMime:Course
title: Implementieren von Continuous Integration
metadata:
  title: 'Kurs AZ-400T02-A: Implementieren von Continuous Integration'
  description: 'Kurs AZ-400T02-A: Implementieren von Continuous Integration'
  ms.openlocfilehash: 8f198a82959980d166039e61b49b4fa7a5d073f0
  ms.sourcegitcommit: b69fd4d0c808e4780010278f0cb189c2246f8dc0
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 12/28/2021
  ms.locfileid: "132107626"
uid: course.az-400t02
courseNumber: AZ-400T02-A
hoursToComplete: 24
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: Erklären, warum kontinuierliche Integration wichtig ist
- skill: Implementieren einer kontinuierlichen Integration mit Azure-DevOps
- skill: Konfigurieren von Builds und verfügbare Optionen
- skill: Erstellen eines automatisierten Buildworkflows
- skill: Integrieren anderer Buildtools in Azure DevOps
- skill: Implementieren hybrider Buildprozesse
- skill: Beschreiben der Bedeutung von Codequalität und wie sie gemessen wird
- skill: Erkennen von Code Smells
- skill: Integrieren automatisierter Tests zur Codequalität
- skill: Erstellen von Berichten zur Code Coverage während Tests
- skill: Hinzufügen von Tools zum Messen technischer Schulden
- skill: Erkennen von Open-Source- und anderen Lizenzierungsproblemen
- skill: Implementieren einer Containerbuildstrategie
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- advanced
roles:
- devops-engineer
products:
- azure
- azure-devops
- azure-kubernetes-service
- azure-container-instances
- azure-automation
exams:
- uid: exam.az-400
summary: >-
  In diesem Kurs werden Kenntnisse und Fähigkeiten zum Implementieren der DevOps-Methoden von Continuous Integration vermittelt. Die Kursteilnehmer erfahren, wie sie Continuous Integration in einer Azure DevOps-Pipeline implementieren, Codequalitäts- und Sicherheitsprinzipien verwalten und eine Containerbuildstrategie implementieren.


  #### <a name="audience-profile"></a>Zielgruppenprofil

  Die Teilnehmer dieses Kurses möchten DevOps-Prozesse für Continuous Integration erlernen oder die Zertifizierungsprüfung für Microsoft Azure DevOps-Lösungen bestehen.
prerequisitesSection: >-
  - Die Teilnehmer sollten über grundlegendes Wissen zu Azure, zur Versionskontrolle, zur agilen Softwareentwicklung und zu grundlegenden Prinzipien der Softwareentwicklung verfügen. Es wäre hilfreich, Erfahrung in einem Unternehmen zu haben, das Software liefert.

  - Es empfiehlt sich, über Erfahrung mit der Arbeit in einer IDE sowie über Kenntnisse des Azure-Portals zu verfügen. Kursteilnehmer, die zu diesen Technologien möglicherweise keine technischen Kenntnisse besitzen, aber an DevOps-Methoden als Kulturverschiebung interessiert sind, sollten den Vorgehensweisen und Erklärungen zu Continuous Integration dennoch folgen können.
outlineSection: >-
  ### <a name="module--158-implementing-continuous-integration-in-an-azure-devops-pipeline"></a>Modul 1&#58; Implementieren von Continuous Integration in einer Azure DevOps-Pipeline

  In diesem Modul werden die Prinzipien von Continuous Integration vorgestellt, darunter&amp;#58; Vorteile, Herausforderungen, bewährte Buildmethoden und Implementierungsschritte. Außerdem erfahren Sie mehr über die Implementierung einer Buildstrategie mit Workflows, Triggern, Agents und Tools.

  #### <a name="lessons"></a>Lektionen

  - Übersicht über Continuous Integration (CI)

  - Implementieren einer Buildstrategie



  #### <a name="lab-58-enabling-continuous-integration-with-azure-pipelines"></a>Lab&#58; Aktivieren von Continuous Integration mit Azure Pipelines


  #### <a name="lab-58-creating-a-jenkins-build-job-and-triggering-ci"></a>Lab&#58; Erstellen eines Jenkins-Buildauftrags und Auslösen von CI

  Nach Abschluss dieses Moduls die Teilnehmer:

  - Erklären der Bedeutung von Continuous Integration

  - Implementieren einer kontinuierlichen Integration mit Azure-DevOps



  ### <a name="module--258-managing-code-quality-and-security-policies"></a>Modul 2&#58; Verwalten von Codequalität und Sicherheitsrichtlinien

  In diesem Modul erlernen Sie das Verwalten der Codequalität, einschließlich technischer Schulden, SonarCloud und anderer Toollösungen. Außerdem erfahren Sie, wie Sicherheitsrichtlinien mit Open Source, OWASP und WhiteSource Bolt verwaltet werden.

  #### <a name="lessons"></a>Lektionen

  - Verwalten von Codequalität

  - Verwalten von Sicherheitsrichtlinien



  #### <a name="lab-58-managing-technical-debt-with-azure-devops-and-sonarcloud"></a>Lab&#58; Verwalten technischer Schulden mit Azure DevOps und SonarCloud


  #### <a name="lab-58-checking-vulnerabilities-using-whitesource-bolt-and-azure-devops"></a>Lab&#58; Überprüfen von Sicherheitsrisiken mithilfe von WhiteSource Bolt und Azure DevOps

  Nach Abschluss dieses Moduls können die Schüler:

  - Verwalten der Codequalität, einschließlich technischer Schulden, SonarCloud und anderer Toollösungen

  - Verwalten von Sicherheitsrichtlinien mit Open Source, OWASP und WhiteSource Bolt

  - Verwalten der Codequalität, einschließlich technischer Schulden, SonarCloud und anderer Toollösungen



  ### <a name="module--358-implementing-a-container-build-strategy"></a>Modul 3&#58; Implementieren einer Containerbuildstrategie

  In diesem Modul erfahren Sie, wie Sie eine Containerstrategie implementieren, unter Berücksichtigung der Unterschiede zwischen Containern und VMs und der Verwendung von Containern durch Microservices. Außerdem erlernen Sie die Implementierung von Containern mithilfe von Docker.

  #### <a name="lessons"></a>Lektionen

  - Implementieren einer Containerbuildstrategie



  #### <a name="lab-58-existing-net-applications-with-azure-and-docker-images"></a>Lab&#58; Vorhandene .NET-Anwendungen mit Azure und Docker-Images

  Nach Abschluss dieses Moduls können die Schüler:

  - Umsetzen einer Containerstrategie unter Berücksichtigung der Unterschiede zwischen Containern und VMs und der Verwendung von Containern durch Microservices

  - Implementieren von Containern mithilfe von Docker
